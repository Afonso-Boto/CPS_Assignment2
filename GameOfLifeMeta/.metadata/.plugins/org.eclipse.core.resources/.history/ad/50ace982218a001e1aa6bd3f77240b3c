/*
 * generated by Xtext 2.32.0
 */
package gol.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GolGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GameOfLifeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gol.Gol.GameOfLife");
		private final Assignment cConfigurationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConfigurationConfigurationParserRuleCall_0 = (RuleCall)cConfigurationAssignment.eContents().get(0);
		
		//GameOfLife:
		//    configuration += Configuration+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//configuration += Configuration+
		public Assignment getConfigurationAssignment() { return cConfigurationAssignment; }
		
		//Configuration
		public RuleCall getConfigurationConfigurationParserRuleCall_0() { return cConfigurationConfigurationParserRuleCall_0; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gol.Gol.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInitialGridKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitialGridAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialGridGridParserRuleCall_3_0 = (RuleCall)cInitialGridAssignment_3.eContents().get(0);
		private final Keyword cEvaluationRulesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRulesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRulesRulesParserRuleCall_5_0 = (RuleCall)cRulesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Configuration:
		//    'Configuration' '{'
		//        'InitialGrid' initialGrid = Grid
		//        'EvaluationRules' rules=Rules
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Configuration' '{'
		//    'InitialGrid' initialGrid = Grid
		//    'EvaluationRules' rules=Rules
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Configuration'
		public Keyword getConfigurationKeyword_0() { return cConfigurationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'InitialGrid'
		public Keyword getInitialGridKeyword_2() { return cInitialGridKeyword_2; }
		
		//initialGrid = Grid
		public Assignment getInitialGridAssignment_3() { return cInitialGridAssignment_3; }
		
		//Grid
		public RuleCall getInitialGridGridParserRuleCall_3_0() { return cInitialGridGridParserRuleCall_3_0; }
		
		//'EvaluationRules'
		public Keyword getEvaluationRulesKeyword_4() { return cEvaluationRulesKeyword_4; }
		
		//rules=Rules
		public Assignment getRulesAssignment_5() { return cRulesAssignment_5; }
		
		//Rules
		public RuleCall getRulesRulesParserRuleCall_5_0() { return cRulesRulesParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gol.Gol.Rules");
		private final Assignment cRuleAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRuleRuleParserRuleCall_0 = (RuleCall)cRuleAssignment.eContents().get(0);
		
		//Rules:
		//      rule += Rule+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//rule += Rule+
		public Assignment getRuleAssignment() { return cRuleAssignment; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_0() { return cRuleRuleParserRuleCall_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gol.Gol.Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSurviveKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cSurviveAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSurviveConditionParserRuleCall_0_1_0 = (RuleCall)cSurviveAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRebornKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRebornAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRebornConditionParserRuleCall_1_1_0 = (RuleCall)cRebornAssignment_1_1.eContents().get(0);
		
		//Rule:
		//    'Survive' survive += Condition+ |
		//    'Reborn' reborn += Condition+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Survive' survive += Condition+ |
		//'Reborn' reborn += Condition+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Survive' survive += Condition+
		public Group getGroup_0() { return cGroup_0; }
		
		//'Survive'
		public Keyword getSurviveKeyword_0_0() { return cSurviveKeyword_0_0; }
		
		//survive += Condition+
		public Assignment getSurviveAssignment_0_1() { return cSurviveAssignment_0_1; }
		
		//Condition
		public RuleCall getSurviveConditionParserRuleCall_0_1_0() { return cSurviveConditionParserRuleCall_0_1_0; }
		
		//'Reborn' reborn += Condition+
		public Group getGroup_1() { return cGroup_1; }
		
		//'Reborn'
		public Keyword getRebornKeyword_1_0() { return cRebornKeyword_1_0; }
		
		//reborn += Condition+
		public Assignment getRebornAssignment_1_1() { return cRebornAssignment_1_1; }
		
		//Condition
		public RuleCall getRebornConditionParserRuleCall_1_1_0() { return cRebornConditionParserRuleCall_1_1_0; }
	}
	public class GridElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gol.Gol.Grid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAliveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAliveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAliveCoordinateParserRuleCall_2_0 = (RuleCall)cAliveAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Grid:
		//    'Alive:' '{' alive += Coordinate+ '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Alive:' '{' alive += Coordinate+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Alive:'
		public Keyword getAliveKeyword_0() { return cAliveKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//alive += Coordinate+
		public Assignment getAliveAssignment_2() { return cAliveAssignment_2; }
		
		//Coordinate
		public RuleCall getAliveCoordinateParserRuleCall_2_0() { return cAliveCoordinateParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CoordinateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gol.Gol.Coordinate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Coordinate:
		//    '(' x=INT ',' y=INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' x=INT ',' y=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=INT
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_3_0() { return cYINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gol.Gol.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignConditionSignEnumRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Condition:
		//    sign=ConditionSign value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//sign=ConditionSign value=INT
		public Group getGroup() { return cGroup; }
		
		//sign=ConditionSign
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }
		
		//ConditionSign
		public RuleCall getSignConditionSignEnumRuleCall_0_0() { return cSignConditionSignEnumRuleCall_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	
	public class ConditionSignElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "gol.Gol.ConditionSign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESS_THANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESS_THANLessThanSignKeyword_0_0 = (Keyword)cLESS_THANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALS_TOEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEQUALS_TOEqualsSignKeyword_1_0 = (Keyword)cEQUALS_TOEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATER_THANGreaterThanSignKeyword_2_0 = (Keyword)cGREATER_THANEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ConditionSign:
		//    LESS_THAN='<'|
		//    EQUALS_TO='='|
		//    GREATER_THAN='>'
		//;
		public EnumRule getRule() { return rule; }
		
		//LESS_THAN='<'|
		//EQUALS_TO='='|
		//GREATER_THAN='>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS_THAN='<'
		public EnumLiteralDeclaration getLESS_THANEnumLiteralDeclaration_0() { return cLESS_THANEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getLESS_THANLessThanSignKeyword_0_0() { return cLESS_THANLessThanSignKeyword_0_0; }
		
		//EQUALS_TO='='
		public EnumLiteralDeclaration getEQUALS_TOEnumLiteralDeclaration_1() { return cEQUALS_TOEnumLiteralDeclaration_1; }
		
		//'='
		public Keyword getEQUALS_TOEqualsSignKeyword_1_0() { return cEQUALS_TOEqualsSignKeyword_1_0; }
		
		//GREATER_THAN='>'
		public EnumLiteralDeclaration getGREATER_THANEnumLiteralDeclaration_2() { return cGREATER_THANEnumLiteralDeclaration_2; }
		
		//'>'
		public Keyword getGREATER_THANGreaterThanSignKeyword_2_0() { return cGREATER_THANGreaterThanSignKeyword_2_0; }
	}
	
	private final GameOfLifeElements pGameOfLife;
	private final ConfigurationElements pConfiguration;
	private final RulesElements pRules;
	private final RuleElements pRule;
	private final GridElements pGrid;
	private final CoordinateElements pCoordinate;
	private final ConditionElements pCondition;
	private final ConditionSignElements eConditionSign;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GolGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGameOfLife = new GameOfLifeElements();
		this.pConfiguration = new ConfigurationElements();
		this.pRules = new RulesElements();
		this.pRule = new RuleElements();
		this.pGrid = new GridElements();
		this.pCoordinate = new CoordinateElements();
		this.pCondition = new ConditionElements();
		this.eConditionSign = new ConditionSignElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("gol.Gol".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GameOfLife:
	//    configuration += Configuration+
	//;
	public GameOfLifeElements getGameOfLifeAccess() {
		return pGameOfLife;
	}
	
	public ParserRule getGameOfLifeRule() {
		return getGameOfLifeAccess().getRule();
	}
	
	//Configuration:
	//    'Configuration' '{'
	//        'InitialGrid' initialGrid = Grid
	//        'EvaluationRules' rules=Rules
	//    '}'
	//;
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//Rules:
	//      rule += Rule+
	//;
	public RulesElements getRulesAccess() {
		return pRules;
	}
	
	public ParserRule getRulesRule() {
		return getRulesAccess().getRule();
	}
	
	//Rule:
	//    'Survive' survive += Condition+ |
	//    'Reborn' reborn += Condition+
	//;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Grid:
	//    'Alive:' '{' alive += Coordinate+ '}'
	//;
	public GridElements getGridAccess() {
		return pGrid;
	}
	
	public ParserRule getGridRule() {
		return getGridAccess().getRule();
	}
	
	//Coordinate:
	//    '(' x=INT ',' y=INT ')'
	//;
	public CoordinateElements getCoordinateAccess() {
		return pCoordinate;
	}
	
	public ParserRule getCoordinateRule() {
		return getCoordinateAccess().getRule();
	}
	
	//Condition:
	//    sign=ConditionSign value=INT
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//enum ConditionSign:
	//    LESS_THAN='<'|
	//    EQUALS_TO='='|
	//    GREATER_THAN='>'
	//;
	public ConditionSignElements getConditionSignAccess() {
		return eConditionSign;
	}
	
	public EnumRule getConditionSignRule() {
		return getConditionSignAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
