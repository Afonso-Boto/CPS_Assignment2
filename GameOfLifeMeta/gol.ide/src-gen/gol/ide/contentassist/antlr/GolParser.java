/*
 * generated by Xtext 2.32.0
 */
package gol.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import gol.ide.contentassist.antlr.internal.InternalGolParser;
import gol.services.GolGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GolParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GolGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GolGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getRuleAccess().getAlternatives(), "rule__Rule__Alternatives");
			builder.put(grammarAccess.getConditionSignAccess().getAlternatives(), "rule__ConditionSign__Alternatives");
			builder.put(grammarAccess.getGameOfLifeAccess().getGroup(), "rule__GameOfLife__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_0(), "rule__Rule__Group_0__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_1(), "rule__Rule__Group_1__0");
			builder.put(grammarAccess.getGridAccess().getGroup(), "rule__Grid__Group__0");
			builder.put(grammarAccess.getCoordinateAccess().getGroup(), "rule__Coordinate__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getGameOfLifeAccess().getInitialGridAssignment_3(), "rule__GameOfLife__InitialGridAssignment_3");
			builder.put(grammarAccess.getGameOfLifeAccess().getRulesAssignment_5(), "rule__GameOfLife__RulesAssignment_5");
			builder.put(grammarAccess.getRulesAccess().getRuleAssignment(), "rule__Rules__RuleAssignment");
			builder.put(grammarAccess.getRuleAccess().getSurviveAssignment_0_1(), "rule__Rule__SurviveAssignment_0_1");
			builder.put(grammarAccess.getRuleAccess().getRebornAssignment_1_1(), "rule__Rule__RebornAssignment_1_1");
			builder.put(grammarAccess.getGridAccess().getAliveAssignment_2(), "rule__Grid__AliveAssignment_2");
			builder.put(grammarAccess.getCoordinateAccess().getXAssignment_1(), "rule__Coordinate__XAssignment_1");
			builder.put(grammarAccess.getCoordinateAccess().getYAssignment_3(), "rule__Coordinate__YAssignment_3");
			builder.put(grammarAccess.getConditionAccess().getSignAssignment_0(), "rule__Condition__SignAssignment_0");
			builder.put(grammarAccess.getConditionAccess().getValueAssignment_1(), "rule__Condition__ValueAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GolGrammarAccess grammarAccess;

	@Override
	protected InternalGolParser createParser() {
		InternalGolParser result = new InternalGolParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GolGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GolGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
